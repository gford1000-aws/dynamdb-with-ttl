{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create DynamoDB table, where TTL-deleted items are moved to an S3 bucket (all in a private VPC via VPC Endpoints)",
  "Parameters": {
    "DDBEndpointPrefixList" : {
      "Description" : "The prefix list 'pl-xxxxxxx' value for DynamoDB in the deployment region.  Use 'aws ec2 describe-prefix-lists'",
      "Type" : "String"
    },    
    "HashKeyAttributeName" : {
      "Description" : "The attribute name that will be the Hash key of the table",
      "Type" : "String",
      "Default" : "MyKey"
    },
    "HashKeyAttributeType" : {
      "Description" : "The attribute type of the Hash key of the table",
      "Type" : "String",
      "Default" : "S",
      "AllowedValues" : [ "S", "N", "B" ]
    },
    "RangeKeyAttributeName" : {
      "Description" : "(Optional) The attribute name that will be the range key of the table",
      "Type" : "String",
      "Default" : "MyRange"
    },
    "RangeKeyAttributeType" : {
      "Description" : "The attribute type of the Range key of the table",
      "Type" : "String",
      "Default" : "S",
      "AllowedValues" : [ "S", "N", "B" ]
    },
    "RunOnceTemplateURL" : {
      "Description" : "The URL to the template to trigger Lambda Functions once (see https://github.com/gford1000-aws/dynamdb-with-ttl/blob/master/dynamodb-with-ttl.cform)",
      "Type" : "String"
    },
    "ProvisionedReadCapacityUnits" : {
      "Description" : "The read IOPS for the table",
      "Type" : "Number",
      "Default" : "5"
    },
    "ProvisionedWriteCapacityUnits" : {
      "Description" : "The write IOPS for the table",
      "Type" : "Number",
      "Default" : "5"
    },
    "S3EndpointPrefixList" : {
      "Description" : "The prefix list 'pl-xxxxxxx' value for S3 in the deployment region.  Use 'aws ec2 describe-prefix-lists'",
      "Type" : "String"
    },
    "TTLAttributeName" : {
      "Description" : "The name of the (Number) attribute that will be used for TTL",
      "Type" : "String",
      "Default" : "MyTTL"
    },
    "TTLDynamoDBTemplateURL" : {
      "Description" : "The URL to the template to create the DynamoDB table with TTL (see https://github.com/gford1000-aws/dynamdb-with-ttl/blob/master/dynamodb-with-ttl.cform)",
      "Type" : "String"
    },
    "VPCTemplateURL" : {
      "Description" : "The URL to the template to create the VPC (see https://github.com/gford1000-aws/vpc/blob/master/create_vpc.cform)",
      "Type" : "String"
    } 
  },
  "Resources": {
    "VPC" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "CidrAddress" : "10.0",
          "CreatePublicSubnet" : "false",
          "EnableDnsSupport" : "true",
          "PrivateSubnetCount" : "3"
        },
        "TemplateURL" : { "Ref" : "VPCTemplateURL" }
      }
    },
    "DDB" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "HashKeyAttributeName" : { "Ref" : "HashKeyAttributeName" },
          "HashKeyAttributeType" : { "Ref" : "HashKeyAttributeType" },
          "RangeKeyAttributeName" : { "Ref" : "RangeKeyAttributeName" },
          "RangeKeyAttributeType" : { "Ref" : "RangeKeyAttributeType" },
          "ProvisionedReadCapacityUnits" : { "Ref" : "ProvisionedReadCapacityUnits" },
          "ProvisionedWriteCapacityUnits" : { "Ref" : "ProvisionedWriteCapacityUnits" },
          "RunOnceTemplateURL" : { "Ref" : "RunOnceTemplateURL" },
          "TTLAttributeName" : { "Ref" : "TTLAttributeName" },
          "StreamType" : "NEW_AND_OLD_IMAGES",
          "UpdateViaVPC" : "true",
          "VPC" : { "Fn::GetAtt" : [ "VPC", "Outputs.VPC" ] },
          "VPCSubnetList" : { "Fn::GetAtt" : [ "VPC", "Outputs.PrivateSubnets" ] },
          "VPCRouteTable" : { "Fn::GetAtt" : [ "VPC", "Outputs.PrivateSubnetRouteTable" ] },
          "DDBEndpointPrefixList" : { "Ref" : "DDBEndpointPrefixList" }
        },
        "TemplateURL" : { "Ref" : "TTLDynamoDBTemplateURL" }
      }
    },
    "S3Endpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement": [
            {
              "Effect" : "Allow",
              "Principal" : "*",
              "Action" : [ "s3:PutObject" ],
              "Resource": [ { "Fn::Sub": [ "${Arn}/*", { "Arn": { "Fn::GetAtt" : [ "Bucket", "Arn" ] } } ] } ] 
            }
          ]
        },
        "RouteTableIds" : [ { "Fn::GetAtt" : [ "VPC", "Outputs.PrivateSubnetRouteTable" ] } ],
        "ServiceName" : { "Fn::Sub" : [ "com.amazonaws.${Region}.s3", { "Region" : { "Ref" : "AWS::Region" } } ] },
        "VpcId" : { "Fn::GetAtt" : [ "VPC", "Outputs.VPC" ] }
      }
    },
    "Bucket": {
        "Type" : "AWS::S3::Bucket",
        "Description" : "Bucket that Lambda will write deleted items to",
        "Properties" : {
            "AccessControl" : "Private"
        }
    },    
    "LambdaS3Write" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : "VPC",
      "Properties" : {
        "Code" : {
          "ZipFile" : {
            "Fn::Join": [
              "\n",
              [
                "import boto3",
                "import botocore.config",
                "import json",
                "import os",
                "from uuid import uuid4",
                "",
                "BUCKET_NAME = os.environ['BucketName']",
                "REGION_NAME = os.environ['RegionName']",
                "",
                "def lambda_handler(event, context):",
                "    # Using S3 VPC Endpoint requires 'path' style addressing, to avoid global url resolution",
                "    # Create client per: http://boto3.readthedocs.io/en/latest/guide/s3.html",
                "    client = boto3.client('s3', REGION_NAME, config=botocore.config.Config(s3={'addressing_style':'path'}))",
                "    print('Event has {} records'.format(len(event.get('Records', []))))",
                "    for record in event.get('Records', []):",
                "       key = record.get('eventID', 'missing-{}'.format(uuid4()))",
                "       user_identity_type = record.get('userIdentity', {}).get('type', '')",
                "       user_identity_principal_id = record.get('userIdentity', {}).get('principalId', '')",
                "",
                "       # Test for items deleted by TTL",
                "       if user_identity_type == 'Service' and user_identity_principal_id == 'dynamodb.amazonaws.com':",
                "          key = 'ttl-deletion/{}'.format(key)",
                "       else:",
                "          key = 'other/{}'.format(key)",
                "",
                "       resp = client.put_object(",
                "          Bucket=BUCKET_NAME,",
                "          Key=key,",
                "          Body=bytearray(json.dumps(record)))",
                "       print(resp)",
                ""
              ]
            ]
          }
        },
        "Description" : "Lambda archiving deleted items from the DynamoDB table",
        "Environment" : {
            "Variables" : {
                "BucketName" : { "Ref": "Bucket" },
                "RegionName" : { "Ref": "AWS::Region" }
            }
        },
        "Handler" : "index.lambda_handler",
        "MemorySize" : 128,
        "Role" : { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime" : "python2.7",
        "Timeout" : 300,
        "VpcConfig" : {
            "SecurityGroupIds" : [ { "Ref" : "LambdaSecurityGroup" }],
            "SubnetIds" : { "Fn::Split" : [ ",", { "Fn::GetAtt" : [ "VPC", "Outputs.PrivateSubnets" ] } ] }
        }
      }
    },
    "LambdaSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security Group for Lambda Egress",
        "VpcId" : { "Fn::GetAtt" : [ "VPC", "Outputs.VPC" ] },
        "SecurityGroupEgress" : [
          {
            "DestinationPrefixListId" : { "Ref" : "S3EndpointPrefixList" },
            "IpProtocol" : "-1" 
          }
        ]
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*",
                  "Effect": "Allow"
                },
                {
                  "Effect" : "Allow",
                  "Action" : [ 
                    "s3:PutObject"
                  ],
                  "Resource": [ 
                    {
                      "Fn::Join" : [ "",
                        [
                          { "Fn::GetAtt" : [ "Bucket", "Arn" ] },
                          "/*"
                        ]
                      ]
                    } 
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[ 
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": [ 
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": { "Fn::GetAtt" : [ "DDB", "Outputs.TableStreamArn" ] }
                }
              ]
            }
          }
        ]
      }
    },
    "EventSourceMapping": {  
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn" : { "Fn::GetAtt" : [ "DDB", "Outputs.TableStreamArn" ] },
        "FunctionName" : { "Fn::GetAtt" : [ "LambdaS3Write", "Arn" ] },
        "StartingPosition" : "TRIM_HORIZON"
      }
    }
  },
  "Outputs": {
    "TableName" : {
      "Description" : "The name of the created table",
      "Value" : { "Fn::GetAtt" : [ "DDB", "Outputs.TableName" ] }
    },
    "Bucket" : {
      "Description" : "The name of the Bucket used for archiving deleted items",
      "Value" : { "Ref" : "Bucket" }      
    }
  }
}
